@startuml
skinparam classAttributeIconSize 0
left to right direction


package ir{

    Instruction --> inst_type

    class Instruction{
        - op inst_type,
        - dest string
        - operands vector<string>
        - block IRBlock*
    }

    Instruction -- IRBlock


    class IRFunc {
        - name : string
        - blocks : vector<IRBlock*>
        - params: vector<string>
    }

    class IRBlock {
        - label : string
        - instructions : vector<Instruction*>
        - func : IRFunc*
        - exitTrue : IRBlock*
        - exitFalse : IRBlock*
        - testVarName : string
    }

    IRBlock *-- "*" Instruction
    IRFunc *-- "*" IRBlock

    IRBlock -- "exitTrue" IRBlock
    IRBlock -- "exitFalse" IRBlock

    enum inst_type {
        ldcst
        store
        ret
        add
        sub
        mul
        div
        neg
        loadT
        storeT
        call
        je
        jmp
        equalcomp
        diffcomp
        infcomp
        infeqcomp
        supcomp
        supeqcomp
        bitwise_and
        bitwise_or
        bitwise_xor
        bitwise_not
        postincre
        postdecre
        preincre
        predecre
        logicalNot
    }
}

package generator{

    ASMGenerator *-- "*" Instruction

    class ASMGenerator {
        -vector<Instruction *> instruction
        -symbolTable : map<string, map<string,int>>

        generate(ostream)

    }

    
    IRGenerator *-- "*" IRFunc
    class IRGenerator{
        -vector<IRFunc *> instruction
        -ast : vector<Node*>
        -symbolTable : map<string, map<string,int>>
        -tempVarCount : int
        -symbolOffsets : map<string,int>

        generate()

    }


    X86Generator --|> ASMGenerator
    MSP30Generator --|> ASMGenerator

}



package ast{

    Statement --|> Node
    Assignement --|> Operator
    Block --|> Node
    Constant --|> Expression
    Operator --|> Expression
    Return --|> Expression
    Variable --|> Expression
    Char --|> Expression
    Expression --|> Statement
    Declaration --|> Statement
    For --|> Statement
    Func --|> Node
    FuncCall --|> Expression
    IfElse --|> Statement
    ArrayValue --|> Expression
    ArrayDeclaration --|> Expression
    UnExpression --|> Expression

    Block *-- "*" Expression
    
    class Node{
        
    }

    class FuncParam {
        - name : string
    }

    class Func {
        - name : string
        - block : Block *
        - params : vector<FuncParam*>
    }

    Func *-- "*" FuncParam

    class Assignement{
        -lvalue : Variable *
        -rvalue : Expression *
    }
    
    class Block{
        -statement : Expression *
    }
    
    class Constant{
        -value : int
    }
    
    class Operator{
        -left : Expression *
        -right : Expression *
        -op : Operator
    }
    
    Operator --> OpType
    class Operator{
        -opType : OpType
    }
    
    enum OpType {
        MULT
        DIV
        ADD
        MINUS
        ASSIGN
    }

    
    class Return{
        -statement : Expression *
    }
    
    class UnExpression{
        -expr : Expression *
        -op : UnOperator
    }
    UnExpression --> UnOperator
    UnOperator --> UnOpType
    class UnOperator{
        -opType : UnOpType
    }

    enum UnOpType{
        UN_PLUS
        UN_MINUS
    }

    class Expression{
        
    }
    
    class Variable{
        -name : string
    }

}
    
class Visitor{
    -symbolTable : map<string, int>
    -stackOffset : int
    -errorCount : int
}

class main{

}

@enduml